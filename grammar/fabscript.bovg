<!-- Faber Scriptorum Grammar -->

enable full-backtracking;

line-comment-style '#';

word ID '[a-zA-Z_][a-zA-Z0-9_]*';
word DIGITS '[0-9]+';
literal LIT;
separator BRACE_OPEN '[';
separator BRACE_CLOSE ']';
separator PAR_OPEN '(';
separator PAR_CLOSE ')';
separator DOT '.';
separator COMMA ',';
separator PLUS '+';
separator MINUS '-';
separator EQ '==';
separator NE '<>';
separator GE '>=';
separator LE '<=';
separator ASSIGN '=';
separator GT '>';
separator LT '<';

@grammar
command = 
	loop_begin |
	loop_end |
	while_begin |
	while_end |
	if_begin | 
	else |
	if_end |
	case_begin |
	case_branch |
	case_end |
	var_decl |
	assign |
	snippet_begin |
	snippet_end |
        paste_snippet
	;

@grammar
symbol = 
	path
	;

loop_begin = 
	'for' ( 'each' ( line=var_name | 'key' MINUS 'value' MINUS 'pair' key=var_name COMMA value=var_name ) 'in' | 'all' ) ( table=path ) 
	( 'where' filter=disjunction )? 'do' 
	;

loop_end = 
	'endfor' | 'done'
	;

while_begin = 
	'while' BRACE_OPEN cond=disjunction BRACE_CLOSE 'do'
	;

while_end = 
	'endwhile'
	;

if_begin = 
	(if='if'|elseif='elseif') BRACE_OPEN cond=disjunction BRACE_CLOSE 'then' 'begin'
	;

else = 
	'else'
	;

if_end = 
	'endif'
	;

case_begin = 
	'case' path 'in'
	;

case_branch = 
	(default='*' | expr=expr (COMMA expr=expr)* ) PAR_CLOSE
	;

case_end = 
	'endcase'
	;

var_decl = 
	'declare' name=var_name |
	'define' name=var_name ASSIGN value=expr
	;
	
assign = 
	name=var_name ASSIGN value=expr
	;

snippet_begin = 'snippet' name=ID PAR_OPEN ( param=ID ( COMMA param=ID )* )? PAR_CLOSE;

% snippet_begin {

$res = new Bovinus_AstNode('snippet_begin');

$name = $astNode->getChildById('name')->getText();
$res->addChild(new Bovinus_AstNode('name', $name));

$paramNodes = $astNode->getChildrenById('param');
foreach ($paramNodes as $paramNode) {
    $res->addChild(new Bovinus_AstNode('param', $paramNode->getText()));
}

return $res;

% }

snippet_end = 'endsnippet';

% snippet_end {

return new Bovinus_AstNode('snippet_end');

% } 

paste_snippet =	
    'paste' 'snippet' name=ID PAR_OPEN ( arg=expr (COMMA arg=expr)* )? PAR_CLOSE ('indent' 'by' indent=expr )?;

% paste_snippet {

$res = new Bovinus_AstNode('paste_snippet');

$name = $astNode->getChildById('name')->getText();
$res->addChild(new Bovinus_AstNode('name', $name));

$indentLevel = $astNode->getChildById('indent');
if ($indentLevel != null) {
    $indentLevel->setId('');
    $indent = new Bovinus_AstNode('indent_by');
    $indent->addChild($indentLevel);
    $res->addChild($indent);
}

$argNodes = $astNode->getChildrenById('arg');
if (count($argNodes) > 0) {
    $args = new Bovinus_AstNode('arguments');
    $res->addChild($args);
    foreach ($argNodes as $argNode) {
        $argNode->setId('');
        $args->addChild($argNode);
    }
}

return $res;

% }

disjunction = 
	part=conjunction ( 'or' part=conjunction )*
	;

conjunction =
	part=condition ( 'and' part=condition )*
	;

condition = 
	(neg='not')? ( PAR_OPEN non_atomic=disjunction PAR_CLOSE | atomic=atomic )
	;

atomic = 
	bool_comparison=comparison |
	bool_range=range |
	bool_path=path
	;

var_name = 
	ID
	;

call = 
	name=ID ( PAR_OPEN PAR_CLOSE | PAR_OPEN arg=expr (COMMA arg=expr)* PAR_CLOSE )
	;

path = 
	sub=path_element (DOT sub=path_element)*
	;

path_element = 
	call=call |
	var=var_name |
	(list=call|list=var_name) (BRACE_OPEN index=expr BRACE_CLOSE)+
	;

comparison = 
	lhs=expr ( op=EQ | op=NE | op=GT | op=GE | op=LT | op=LE ) (rhs=expr|rhs=disjunction)
	;

range = 
	(value=LIT|value=number|value=path) 'between' 
	(min=LIT|min=number|min=path) 'and' 
	(max=LIT|max=number|max=path)
	;

expr = 
	lit=LIT |
	number |
	boolean |
	path | 
	sum
	;

sum = 
	op1=operand (op=PLUS|op=MINUS) op2=expr |
	PAR_OPEN op1=operand (op=PLUS|op=MINUS) op2=expr PAR_CLOSE
	;

operand = 
	PAR_OPEN expr PAR_CLOSE |
	LIT |
	number |
	boolean |
	path
	;

number =
	(sign=PLUS|sign=MINUS)? digits=DIGITS (DOT decimals=DIGITS)?
	;

boolean = 
	'TRUE' | 'FALSE'
	;
